import{r as s,l as f}from"./chunk-GNGMS2XR-BMTy4fC2.js";import{s as n}from"./AuthContext-DfHXuJuK.js";const k=s.createContext(null);function T({children:o}){const[r,l]=s.useState(()=>{const t=typeof localStorage<"u"?localStorage.getItem("tasks"):null;return t?JSON.parse(t):[]});s.useEffect(()=>{localStorage.setItem("tasks",JSON.stringify(r))},[r]);const c=s.useCallback(async(t,e)=>{try{await n("add",{title:t,dueDate:e});const a={id:Date.now().toString(),title:t,dueDate:e,completed:!1};l(p=>[...p,a])}catch(a){throw console.error("Failed to add task:",a),new Error("Failed to add task. Please try again.")}},[]),i=s.useCallback(async t=>{try{await n("toggle",{id:t}),l(e=>e.map(a=>a.id===t?{...a,completed:!a.completed}:a))}catch(e){throw console.error("Failed to toggle task:",e),new Error("Failed to update task status. Please try again.")}},[]),d=s.useCallback(async t=>{try{await n("delete",{id:t}),l(e=>e.filter(a=>a.id!==t))}catch(e){throw console.error("Failed to delete task:",e),new Error("Failed to delete task. Please try again.")}},[]),u=s.useCallback(t=>{switch(t){case"pending":return r.filter(e=>!e.completed);case"completed":return r.filter(e=>e.completed);default:return r}},[r]),m=s.useMemo(()=>({tasks:r,addTask:c,toggleTask:i,deleteTask:d,filterTasks:u}),[r,c,i,d,u]);return f.jsx(k.Provider,{value:m,children:o})}function y(){const o=s.useContext(k);if(!o)throw new Error("useTasks must be used within a TaskProvider");return o}export{T,y as u};
